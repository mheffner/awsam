#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), '../lib')

begin
  require 'awsam'
rescue LoadError => err
  $stderr.puts "ERROR: Unable to load AWSAM gem dependencies: #{err.message}"
  exit 1
end

require 'optparse'

def err(*args)
  $stderr.puts *args
end

def read_val(prompt, default = nil)
  begin
    if default
      print "#{prompt} [#{default}]: "
    else
      print "#{prompt}: "
    end

    val = gets.chomp
    if val.empty? && default
      val = default
    end
  end while val.empty?

  val
end

Awsam::Accounts::load!

$options = {}
$cmd = nil

def selected_account(default_fallback = false)
  if !$options[:account] || $options[:account].empty?
    err "Command requires an account"
    exit 1
  end

  acct = Awsam::Accounts.find($options[:account])
  unless acct
    exit 1
  end
  acct
end

def usage
  puts "Usage: raem --init"
  exit
end

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: raem [options]\n"

  # help
  opts.on( '-h', '--help', 'Display this screen' ) do
    usage
  end

  opts.on('--add') do
    $cmd = :add_account
  end

  opts.on('--remove') do
    $cmd = :remove_account
  end

  opts.on('--account <ACCOUNT>') do |acctname|
    $options[:account] = acctname
  end

  opts.on('--import-key') do
    $cmd = :import_key
  end

  opts.on('--remove-key') do
    $cmd = :remove_key
  end

  opts.on('--keyname <KEYNAME>') do |keyname|
    $options[:keyname] = keyname
  end

  opts.on('--keyfile <KEYFILE>') do |keyfile|
    $options[:keyfile] = keyfile
  end

  opts.on('--list') do
    $cmd = :list
  end

  opts.on('--environ') do
    $cmd = :environ
  end

  opts.on('--environ-key') do
    $cmd = :environ_key
  end

  opts.on('--export') do
    $options[:set_export] = true
  end

  opts.on('--unset') do
    $options[:unset_environ] = true
  end

  opts.on('--init') do
    $cmd = :init
  end

  opts.on('--print-default-acct') do
    $cmd = :print_default_acct
  end

  opts.on('--print-default-key') do
    $cmd = :print_default_key
  end

  opts.on('--default') do
    $options[:set_default] = true
  end
end

optparse.parse!(ARGV)

usage unless $cmd

case $cmd
when :init
  Awsam::init_awsam

when :list
  inuse = ENV['AWSAM_ACTIVE_ACCOUNT']
  inusekey = ENV['AWSAM_ACTIVE_KEY']
  puts "\nAWS Accounts:\n\n"

  default = Awsam::Accounts::get_default
  accts = Awsam::Accounts::get
  accts.each_pair do |name, acct|
    desc = acct.desc ? " [#{acct.desc}]" : ""
    if acct.keys.length > 0
      dfltkey = acct.get_default_key
      names = acct.keys.keys.collect{ |k|
        pfx1 = (inuse == name && inusekey == k) ? ">" : ""
        pfx2 = (dfltkey && dfltkey.name == k) ? "*" : ""
        "#{pfx1}#{pfx2}#{k}"
      }.join(",")
      plural = "key" + (acct.keys.length > 1 ? "s" : "")
      desc += " [#{acct.keys.length} #{plural}: #{names}]"
    end
    pfx = inuse == name ? "=>" : "  "
    dfltmark = (default && default.name == name) ? "*" : " "
    puts "#{pfx}#{dfltmark}#{name}#{desc}"
  end

  puts

when :print_default_acct
  default = Awsam::Accounts::get_default
  exit 1 unless default
  puts default.name

when :print_default_key
  acct = selected_account
  default = acct.get_default_key
  exit 1 unless default
  puts default.name

when :environ
  acct = selected_account

  if $options[:set_default]
    r = Awsam::Accounts::set_default(acct.name)
    unless r
      err "Failed to set account #{acct.name} as the default"
      exit 1
    end
  end

  if $options[:unset_environ]
    acct.print_unset_environ
  else
    acct.print_environ(!$options[:set_export].nil?)
  end

when :environ_key
  unless $options[:keyname]
    err "Option requires a keyname"
    exit 1
  end

  acct = selected_account

  k = acct.find_key($options[:keyname])
  unless k
    err "Could not find key #{$options[:keyname]} in active account"
    exit 1
  end

  if $options[:set_default]
    r = acct.set_default_key(k.name)
    unless r
      err "Failed to set key #{k.name} as the default"
      exit 1
    end
  end

  k.print_environ

when :add_account
  puts "Creating a new AWS account...\n"
  short_name = read_val("Short name")
  desc = read_val("Description")
  aws_region = read_val("AWS Region", ENV['AWS_DEFAULT_REGION'])
  access_key = read_val("Access key", (ENV['AMAZON_ACCESS_KEY_ID'] || ENV['AWS_ACCESS_KEY']))
  secret_key = read_val("Secret key", (ENV['AMAZON_SECRET_ACCESS_KEY'] || ENV['AWS_SECRET_KEY']))
  aws_id = read_val("AWS ID", ENV['AMAZON_AWS_ID'])

  if aws_id.match(/[0-9]+/).nil?
    err "AWS ID must be the numerical account ID"
    exit 1
  end

  acct = Awsam::Account.new(short_name,
                            { :description => desc,
                              :access_key => access_key,
                              :secret_key => secret_key,
                              :aws_id => aws_id,
                              :aws_region => aws_region
                            })
  acct.save

when :remove_account
  selected_account.remove

when :import_key
  unless $options[:keyname] && $options[:keyfile]
    err "Requires keyname and keyfile!"
    exit 1
  end

  acct = selected_account

  display = acct.name + (acct.desc ? " [#{acct.desc}]" : "")

  unless File.exist?($options[:keyfile])
    err "Unable to locate key file: #{$options[:keyfile]}"
    exit 1
  end

  ret = acct.import_key($options[:keyname], $options[:keyfile])
  err "Imported key pair #{$options[:keyname]} for account #{display}"

when :remove_key
  unless $options[:keyname]
    err "Requires keyname!"
    exit 1
  end

  acct = selected_account
  unless acct.remove_key($options[:keyname])
    err "Failed to remove key #{$options[:keyname]}"
    exit 1
  end
end


# Local Variables:
# mode: ruby
# End:
